# Standard gitlab ci scripting. This is a template, please copy and adapt it as needed.
# I am not adding build and token refreshing stages as this will depend on your infra...

stages:
  - code_quality # Run code quality checks on every push/merge (NON BLOCKING on commits)
  - pytest_coverage # Check type definitions, runs pytest and checks for code coverage

code_quality:
  stage: code_quality
  image: $DOCKER_REGISTRY/docker-env_image-name # choose which image you wish to use
  tags: [shared] # Tag enables pipeline_config to be caught by your shared runners
  script:
    - pip install ruff
    - ruff --version
    - ruff check . --fix
    - ruff format
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'


pytest_coverage:
    stage: pytest_coverage
    image: $DOCKER_REGISTRY/docker-env_image-name
    tags: [shared]
    variables:
        PYTHONDONTWRITEBYTECODE: 1
        PYTHONPATH: ${PYTHONPATH}:${CI_PROJECT_DIR}
        SECURE_FILES_DOWNLOAD_PATH: './tests/tests_data/'
        COVERAGE_XML_FILE: .cache/cov/report.xml
    script:
        # Install your project dependencies
        - pip install -r env/requirements.txt
        - pip install -e .
        # TESTS AND COVERAGE: running pytests and checking for minimum code coverage
        - pytest # run pytest and generates coverage files as per pyproject.toml
        - python tests/code_coverage.py # check if coverage is high enough
    coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
    artifacts:
      expire_in: 1 week
      reports:
        coverage_report:
          coverage_format: cobertura
          path: $COVERAGE_XML_FILE
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      - if: '$CI_PIPELINE_SOURCE == "push"'
